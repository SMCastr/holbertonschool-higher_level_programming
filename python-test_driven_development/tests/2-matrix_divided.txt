# Test for the matrix_divided function

>>> from matrix_divided import matrix_divided

# Test with a valid matrix and divisor
>>> matrix = [
...     [1, 2, 3],
...     [4, 5, 6]
... ]
>>> matrix_divided(matrix, 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

# Test with a valid matrix and a different divisor
>>> matrix_divided(matrix, 2)
[[0.5, 1.0, 1.5], [2.0, 2.5, 3.0]]

# Test with all elements being floats
>>> matrix = [
...     [1.0, 2.0, 3.0],
...     [4.0, 5.0, 6.0]
... ]
>>> matrix_divided(matrix, 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

# Test with zero divisor (should raise a ZeroDivisionError)
>>> matrix_divided(matrix, 0)
Traceback (most recent call last):
  ...
ZeroDivisionError: division by zero

# Test with a non-numeric divisor (should raise a TypeError)
>>> matrix_divided(matrix, "3")
Traceback (most recent call last):
  ...
TypeError: div must be a number

# Test with rows of different sizes (should raise a TypeError)
>>> matrix = [
...     [1, 2, 3],
...     [4, 5]
... ]
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
  ...
TypeError: Each row of the matrix must have the same size

# Test with matrix containing non-numeric elements (should raise a TypeError)
>>> matrix = [
...     [1, 2, 'a'],
...     [4, 5, 6]
... ]
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
  ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

# Regular tests passed
